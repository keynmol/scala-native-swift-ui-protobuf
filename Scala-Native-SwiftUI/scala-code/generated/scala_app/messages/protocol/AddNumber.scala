// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala_app.messages.protocol

@SerialVersionUID(0L)
final case class AddNumber(
    payload: scala_app.messages.protocol.AddNumber.Payload = scala_app.messages.protocol.AddNumber.Payload.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AddNumber] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (payload.request.isDefined) {
        val __value = payload.request.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (payload.response.isDefined) {
        val __value = payload.response.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      payload.request.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      payload.response.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getRequest: scala_app.messages.protocol.AddNumber.Request = payload.request.getOrElse(scala_app.messages.protocol.AddNumber.Request.defaultInstance)
    def withRequest(__v: scala_app.messages.protocol.AddNumber.Request): AddNumber = copy(payload = scala_app.messages.protocol.AddNumber.Payload.Request(__v))
    def getResponse: scala_app.messages.protocol.AddNumber.Response = payload.response.getOrElse(scala_app.messages.protocol.AddNumber.Response.defaultInstance)
    def withResponse(__v: scala_app.messages.protocol.AddNumber.Response): AddNumber = copy(payload = scala_app.messages.protocol.AddNumber.Payload.Response(__v))
    def clearPayload: AddNumber = copy(payload = scala_app.messages.protocol.AddNumber.Payload.Empty)
    def withPayload(__v: scala_app.messages.protocol.AddNumber.Payload): AddNumber = copy(payload = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => payload.request.orNull
        case 2 => payload.response.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => payload.request.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => payload.response.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scala_app.messages.protocol.AddNumber.type = scala_app.messages.protocol.AddNumber
    // @@protoc_insertion_point(GeneratedMessage[scala_app.messages.AddNumber])
}

object AddNumber extends scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.AddNumber] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.AddNumber] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala_app.messages.protocol.AddNumber = {
    var __payload: scala_app.messages.protocol.AddNumber.Payload = scala_app.messages.protocol.AddNumber.Payload.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __payload = scala_app.messages.protocol.AddNumber.Payload.Request(__payload.request.fold(_root_.scalapb.LiteParser.readMessage[scala_app.messages.protocol.AddNumber.Request](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __payload = scala_app.messages.protocol.AddNumber.Payload.Response(__payload.response.fold(_root_.scalapb.LiteParser.readMessage[scala_app.messages.protocol.AddNumber.Response](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scala_app.messages.protocol.AddNumber(
        payload = __payload,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala_app.messages.protocol.AddNumber] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scala_app.messages.protocol.AddNumber(
        payload = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala_app.messages.protocol.AddNumber.Request]]).map(scala_app.messages.protocol.AddNumber.Payload.Request(_))
            .orElse[scala_app.messages.protocol.AddNumber.Payload](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala_app.messages.protocol.AddNumber.Response]]).map(scala_app.messages.protocol.AddNumber.Payload.Response(_)))
            .getOrElse(scala_app.messages.protocol.AddNumber.Payload.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProtocolProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProtocolProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala_app.messages.protocol.AddNumber.Request
      case 2 => __out = scala_app.messages.protocol.AddNumber.Response
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.scala_app.messages.protocol.AddNumber.Request,
      _root_.scala_app.messages.protocol.AddNumber.Response
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala_app.messages.protocol.AddNumber(
    payload = scala_app.messages.protocol.AddNumber.Payload.Empty
  )
  sealed trait Payload extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isRequest: _root_.scala.Boolean = false
    def isResponse: _root_.scala.Boolean = false
    def request: _root_.scala.Option[scala_app.messages.protocol.AddNumber.Request] = _root_.scala.None
    def response: _root_.scala.Option[scala_app.messages.protocol.AddNumber.Response] = _root_.scala.None
  }
  object Payload {
    @SerialVersionUID(0L)
    case object Empty extends scala_app.messages.protocol.AddNumber.Payload {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Request(value: scala_app.messages.protocol.AddNumber.Request) extends scala_app.messages.protocol.AddNumber.Payload {
      type ValueType = scala_app.messages.protocol.AddNumber.Request
      override def isRequest: _root_.scala.Boolean = true
      override def request: _root_.scala.Option[scala_app.messages.protocol.AddNumber.Request] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Response(value: scala_app.messages.protocol.AddNumber.Response) extends scala_app.messages.protocol.AddNumber.Payload {
      type ValueType = scala_app.messages.protocol.AddNumber.Response
      override def isResponse: _root_.scala.Boolean = true
      override def response: _root_.scala.Option[scala_app.messages.protocol.AddNumber.Response] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  @SerialVersionUID(0L)
  final case class Request(
      amount: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Request] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = amount
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = amount
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withAmount(__v: _root_.scala.Int): Request = copy(amount = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = amount
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(amount)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: scala_app.messages.protocol.AddNumber.Request.type = scala_app.messages.protocol.AddNumber.Request
      // @@protoc_insertion_point(GeneratedMessage[scala_app.messages.AddNumber.Request])
  }
  
  object Request extends scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.AddNumber.Request] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.AddNumber.Request] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala_app.messages.protocol.AddNumber.Request = {
      var __amount: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __amount = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      scala_app.messages.protocol.AddNumber.Request(
          amount = __amount,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala_app.messages.protocol.AddNumber.Request] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        scala_app.messages.protocol.AddNumber.Request(
          amount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala_app.messages.protocol.AddNumber.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala_app.messages.protocol.AddNumber.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = scala_app.messages.protocol.AddNumber.Request(
      amount = 0
    )
    implicit class RequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber.Request]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala_app.messages.protocol.AddNumber.Request](_l) {
      def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    }
    final val AMOUNT_FIELD_NUMBER = 1
    def of(
      amount: _root_.scala.Int
    ): _root_.scala_app.messages.protocol.AddNumber.Request = _root_.scala_app.messages.protocol.AddNumber.Request(
      amount
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[scala_app.messages.AddNumber.Request])
  }
  
  @SerialVersionUID(0L)
  final case class Response(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Response] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: scala_app.messages.protocol.AddNumber.Response.type = scala_app.messages.protocol.AddNumber.Response
      // @@protoc_insertion_point(GeneratedMessage[scala_app.messages.AddNumber.Response])
  }
  
  object Response extends scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.AddNumber.Response] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.AddNumber.Response] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala_app.messages.protocol.AddNumber.Response = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      scala_app.messages.protocol.AddNumber.Response(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala_app.messages.protocol.AddNumber.Response] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        scala_app.messages.protocol.AddNumber.Response(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala_app.messages.protocol.AddNumber.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala_app.messages.protocol.AddNumber.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = scala_app.messages.protocol.AddNumber.Response(
    )
    implicit class ResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber.Response]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala_app.messages.protocol.AddNumber.Response](_l) {
    }
    def of(
    ): _root_.scala_app.messages.protocol.AddNumber.Response = _root_.scala_app.messages.protocol.AddNumber.Response(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[scala_app.messages.AddNumber.Response])
  }
  
  implicit class AddNumberLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala_app.messages.protocol.AddNumber](_l) {
    def request: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber.Request] = field(_.getRequest)((c_, f_) => c_.copy(payload = scala_app.messages.protocol.AddNumber.Payload.Request(f_)))
    def response: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber.Response] = field(_.getResponse)((c_, f_) => c_.copy(payload = scala_app.messages.protocol.AddNumber.Payload.Response(f_)))
    def payload: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber.Payload] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
  }
  final val REQUEST_FIELD_NUMBER = 1
  final val RESPONSE_FIELD_NUMBER = 2
  def of(
    payload: scala_app.messages.protocol.AddNumber.Payload
  ): _root_.scala_app.messages.protocol.AddNumber = _root_.scala_app.messages.protocol.AddNumber(
    payload
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scala_app.messages.AddNumber])
}
