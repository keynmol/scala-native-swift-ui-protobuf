// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala_app.messages.protocol

@SerialVersionUID(0L)
final case class Exchange(
    payload: scala_app.messages.protocol.Exchange.Payload = scala_app.messages.protocol.Exchange.Payload.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Exchange] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (payload.addNumber.isDefined) {
        val __value = payload.addNumber.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (payload.addString.isDefined) {
        val __value = payload.addString.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      payload.addNumber.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      payload.addString.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getAddNumber: scala_app.messages.protocol.AddNumber = payload.addNumber.getOrElse(scala_app.messages.protocol.AddNumber.defaultInstance)
    def withAddNumber(__v: scala_app.messages.protocol.AddNumber): Exchange = copy(payload = scala_app.messages.protocol.Exchange.Payload.AddNumber(__v))
    def getAddString: scala_app.messages.protocol.AddString = payload.addString.getOrElse(scala_app.messages.protocol.AddString.defaultInstance)
    def withAddString(__v: scala_app.messages.protocol.AddString): Exchange = copy(payload = scala_app.messages.protocol.Exchange.Payload.AddString(__v))
    def clearPayload: Exchange = copy(payload = scala_app.messages.protocol.Exchange.Payload.Empty)
    def withPayload(__v: scala_app.messages.protocol.Exchange.Payload): Exchange = copy(payload = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => payload.addNumber.orNull
        case 2 => payload.addString.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => payload.addNumber.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => payload.addString.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scala_app.messages.protocol.Exchange.type = scala_app.messages.protocol.Exchange
    // @@protoc_insertion_point(GeneratedMessage[scala_app.messages.Exchange])
}

object Exchange extends scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.Exchange] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala_app.messages.protocol.Exchange] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala_app.messages.protocol.Exchange = {
    var __payload: scala_app.messages.protocol.Exchange.Payload = scala_app.messages.protocol.Exchange.Payload.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __payload = scala_app.messages.protocol.Exchange.Payload.AddNumber(__payload.addNumber.fold(_root_.scalapb.LiteParser.readMessage[scala_app.messages.protocol.AddNumber](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __payload = scala_app.messages.protocol.Exchange.Payload.AddString(__payload.addString.fold(_root_.scalapb.LiteParser.readMessage[scala_app.messages.protocol.AddString](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scala_app.messages.protocol.Exchange(
        payload = __payload,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala_app.messages.protocol.Exchange] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scala_app.messages.protocol.Exchange(
        payload = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala_app.messages.protocol.AddNumber]]).map(scala_app.messages.protocol.Exchange.Payload.AddNumber(_))
            .orElse[scala_app.messages.protocol.Exchange.Payload](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala_app.messages.protocol.AddString]]).map(scala_app.messages.protocol.Exchange.Payload.AddString(_)))
            .getOrElse(scala_app.messages.protocol.Exchange.Payload.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProtocolProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProtocolProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala_app.messages.protocol.AddNumber
      case 2 => __out = scala_app.messages.protocol.AddString
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala_app.messages.protocol.Exchange(
    payload = scala_app.messages.protocol.Exchange.Payload.Empty
  )
  sealed trait Payload extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isAddNumber: _root_.scala.Boolean = false
    def isAddString: _root_.scala.Boolean = false
    def addNumber: _root_.scala.Option[scala_app.messages.protocol.AddNumber] = _root_.scala.None
    def addString: _root_.scala.Option[scala_app.messages.protocol.AddString] = _root_.scala.None
  }
  object Payload {
    @SerialVersionUID(0L)
    case object Empty extends scala_app.messages.protocol.Exchange.Payload {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class AddNumber(value: scala_app.messages.protocol.AddNumber) extends scala_app.messages.protocol.Exchange.Payload {
      type ValueType = scala_app.messages.protocol.AddNumber
      override def isAddNumber: _root_.scala.Boolean = true
      override def addNumber: _root_.scala.Option[scala_app.messages.protocol.AddNumber] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class AddString(value: scala_app.messages.protocol.AddString) extends scala_app.messages.protocol.Exchange.Payload {
      type ValueType = scala_app.messages.protocol.AddString
      override def isAddString: _root_.scala.Boolean = true
      override def addString: _root_.scala.Option[scala_app.messages.protocol.AddString] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class ExchangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.Exchange]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala_app.messages.protocol.Exchange](_l) {
    def addNumber: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddNumber] = field(_.getAddNumber)((c_, f_) => c_.copy(payload = scala_app.messages.protocol.Exchange.Payload.AddNumber(f_)))
    def addString: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.AddString] = field(_.getAddString)((c_, f_) => c_.copy(payload = scala_app.messages.protocol.Exchange.Payload.AddString(f_)))
    def payload: _root_.scalapb.lenses.Lens[UpperPB, scala_app.messages.protocol.Exchange.Payload] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
  }
  final val ADD_NUMBER_FIELD_NUMBER = 1
  final val ADD_STRING_FIELD_NUMBER = 2
  def of(
    payload: scala_app.messages.protocol.Exchange.Payload
  ): _root_.scala_app.messages.protocol.Exchange = _root_.scala_app.messages.protocol.Exchange(
    payload
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scala_app.messages.Exchange])
}
